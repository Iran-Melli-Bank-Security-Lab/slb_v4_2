import { React, useEffect, useState , memo } from "react";
import {
  Avatar,
  Box,
  Button,
  Checkbox,
  Divider,
  Modal,
  Typography,
} from "@mui/material";
import { getUsers } from "../../../api/users/getUsers";
import { rmUserAssigned } from "../../../api/users/rmUserAssigned";
import { useSession } from "../../../SessionContext";
import { assingUserToProject } from "../../../api/users/assignUserToProject";
import {getAssignedUsers } from "../../../api/users/getAssignedUsers"
import ConfirmationModal from "./ConfirmationModal";

import { useSocket } from "../../../context/SocketContext";


function AssignPentester({ open, onClose, project }) {
  const [users, setUsers] = useState([]);
  const [selectedPentesters, setSelectedPentesters] = useState([]);
  const {user} = useSession().session
  const [pentesterToRemove, setPentesterToRemove] = useState(null);
  const [confirmationModalOpen, setConfirmationModalOpen] = useState(false);

//socket init 
const socket = useSocket();


  useEffect(() => {
    if (!project || !user?.id) return;

    async function  fetchAssignedUsers() {
        const res = await getAssignedUsers(project?._id , user?.id )
        setSelectedPentesters(res?.pentesters)
    }
    async function fetchUsers() {
      const res = await getUsers();
      setUsers(res.users);
     await fetchAssignedUsers()

    }
    fetchUsers();
  }, [project, user ]);

  const isUserSelected = (userId) => selectedPentesters.includes(userId);

  
  const handleUserToggle = async (pentesterId) => {
    const isSelected = selectedPentesters.includes(pentesterId);
    if (isSelected) {
      setPentesterToRemove(pentesterId);
      setConfirmationModalOpen(true);
    } else {
      await togglePentesterAssignment(pentesterId);
    }
  };

  const togglePentesterAssignment = async (pentesterId) => {
    const isSelected = selectedPentesters.includes(pentesterId);
    const updated = isSelected
      ? selectedPentesters.filter((id) => id !== pentesterId)
      : [...selectedPentesters, pentesterId];
    setSelectedPentesters(updated);
    try {
      if (isSelected) {  
      
     
     const res = await  rmUserAssigned(project._id , pentesterId ,user.id  )
      
      } else {
      

        assingUserToProject(project._id , pentesterId , user.id , project.version ).then(async(value)=>{
          console.log("value of assign user to project : " , value )
           socket.emit("assignUserProject" , {
            projectId :project._id , 
            pentesterId , 
            adminId:user.id , 

           })
           
          //  socket.on("assignedUser" , (data)=>{
          //   console.log("socket data in here : " , data )
          // })
        })
     
     
    }
      // setAlertOpen(true);
    } catch (error) {
      console.error("Error updating user assignment:", error);
    }
  };

  const handleConfirmUnassign = async () => {
    if (pentesterToRemove) {
      await togglePentesterAssignment(pentesterToRemove);
      setPentesterToRemove(null);
      setConfirmationModalOpen(false);
    }
  };

  const handleCloseConfirmationModal = () => {
    setConfirmationModalOpen(false);
    setPentesterToRemove(null);
  };

  return (
    <>
      <Modal
        open={open}
        onClose={onClose}
        aria-labelledby="assign-modal-title"
        aria-describedby="assign-modal-description"
      >
        <Box
          sx={{
            position: "absolute",
            top: "50%",
            left: "50%",
            transform: "translate(-50%, -50%)",
            width: 400,
            bgcolor: "background.paper",
            border: "2px solid #000",
            boxShadow: 24,
            p: 4,
            borderRadius: 2, 
          }}
        >
          <Typography
            id="assign-modal-title"
            variant="h6"
            component="h2"
            gutterBottom
          >
            Assign Users
          </Typography>
          <Typography id="assign-modal-description" sx={{ mb: 2 }}>
            Select users to assign to the project.
          </Typography>
          <div>
            {users.map((user) => (
              <main key={user._id}>
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center space-x-2">
                    <Checkbox
                      checked={isUserSelected(user._id)}
                      onChange={() => handleUserToggle(user._id)}
                    />
                    <Box display="flex" alignItems="center">
                      {/* <Avatar
                        src={`http://localhost:4000/${user.profileImageUrl}`}
                        alt={user.firstName}
                        sx={{ marginRight: 2 }}
                      /> */}
                      <Typography>{user.lastName}</Typography>
                    </Box>
                  </div>
                  <Button
                    variant="outlined"
                    size="small"
                    onClick={() =>
                      handleBugScopeClick(user._id, user, selectedProject)
                    }
                    disabled={!isUserSelected(user._id)}
                  >
                    Bug Scope
                  </Button>
                </div>
                <Divider className="my-1" />
              </main>
            ))}
          </div>
        </Box>
      </Modal>

      <ConfirmationModal
        open={confirmationModalOpen}
        handleClose={handleCloseConfirmationModal}
        handleConfirm={handleConfirmUnassign}
      />
    </>
  );
}

export default memo(AssignPentester);

import React, { useEffect, useState } from 'react';
import TdHead from './TdHead';
import Tr from './Tr';
import Td from './Td';
import RowTr from './PentesterHistory/RowTr';
import useAxiosPrivate from '../../../hooks/useAxiosPrivate';
import moment from 'moment-jalaali';

const PentesterHistory = ({ ProjectId }) => {
  const [users, setUsers] = useState([]);
  const [manager , setManager ] = useState("")

  const serverIp = process.env.REACT_APP_SERVER_IP;
  
  const axiosPrivate = useAxiosPrivate();

  useEffect(() => {
    const getPentesters = async () => {
      try {
        const response = await axiosPrivate.get(`${serverIp}project/pentester/${ProjectId}`);
        const fetchedData = response.data;
        console.log("fetched data in line 20  : ", fetchedData , fetchedData[0].manager);
        setManager(fetchedData[0]?.manager)
        // Map the fetched data to match the structure needed for the table
        const updatedUsers = fetchedData.map((pentester, index) => ({
          id: pentester.id || index, // Use a unique id from fetched data or index as a fallback
          reportDate: moment(new Date(pentester.finishDate).getTime()).format('jYYYY/jMM/jDD') || '',
          documentApprovalDate: moment(new Date(pentester?.managerVerifyDate).getTime()).format('jYYYY/jMM/jDD') || '',
          testEndDate: moment(new Date(pentester.finishDate).getTime()).format('jYYYY/jMM/jDD') || '',
          testStartDate: moment(new Date(pentester.startDate).getTime()).format('jYYYY/jMM/jDD') || '',
          pentesterName: pentester.pentester.firstName + " " + pentester.pentester.lastName || ''
        }));

        // Update the users state with the fetched data
        setUsers(updatedUsers);
      } catch (error) {
        console.error("Error fetching pentesters:", error);
      }
    };

    getPentesters();
  }, [axiosPrivate, serverIp, ProjectId]);

  return (
    <table style={{ borderCollapse: 'collapse', marginLeft: '20.024pt' }} cellSpacing="0">
      <tbody>
        <Tr>
          <TdHead bgcolor="#006FC0" width={83}>تاریخ تهیه گزارش</TdHead>
          <TdHead bgcolor="#006FC0" width={92}>تاریخ تایید مستندات</TdHead>
          <TdHead bgcolor="#006FC0" width={95}>تاریخ پایان آزمون</TdHead>
          <TdHead bgcolor="#006FC0" width={100}>تاریخ شروع آزمون</TdHead>
          <TdHead bgcolor="#006FC0" width={95}>نام آزمونگر</TdHead>
          <TdHead bgcolor="#006FC0" textAlign='right' width={35} >ردیف</TdHead>
        </Tr>

        {users.map((user, index) => (
          <RowTr key={user.id} row={index + 1} bgcolor={index % 2 === 0 ? '#D7D7D7' : ''}>
            <Td className="s10identifier" bgcolor={index % 2 === 0 ? '#D7D7D7' : ''}>
            {index === 0 ? '1403/10/03' : '-'}
            </Td>
            <Td className="s10identifier" bgcolor={index % 2 === 0 ? '#D7D7D7' : ''}>
              {  '-'}
            </Td>
            <Td className="s10identifier" bgcolor={index % 2 === 0 ? '#D7D7D7' : ''}>
              {user.testEndDate || ''}
            </Td>
            <Td className="s10identifier" bgcolor={index % 2 === 0 ? '#D7D7D7' : ''}>
              {user.testStartDate || ''}
            </Td>
            <Td className="s10identifier"  paddingRight='5px' textAlign='end' width={80}  bgcolor={index % 2 === 0 ? '#D7D7D7' : ''}>
              {user.pentesterName || ''}
            </Td>
          </RowTr>
        ))}

        {/* Fixed row at the end */}
<RowTr key="fixed" row={users.length + 1} bgcolor="#FFFFE0">
  <Td className="s10identifier" bgcolor="#FFFFE0">-</Td> {/* This will set ردیف as the total number of rows + 1 */}
  <Td className="s10identifier" bgcolor="#FFFFE0">
    1403/10/03
  </Td>
  <Td className="s10identifier" bgcolor="#FFFFE0">-</Td>
  <Td className="s10identifier" bgcolor="#FFFFE0">-</Td>
  <Td width={80} className="s10identifier" bgcolor="#FFFFE0">
    میثم منصف
  </Td>
</RowTr>
      </tbody>
    </table>
  );
};

export default PentesterHistory;
